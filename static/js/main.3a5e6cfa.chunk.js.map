{"version":3,"sources":["components/ColorModeSwitcher.tsx","hocs/withPersist.ts","store.ts","components/TopBar.tsx","components/TodoList.tsx","components/TodoAdd.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","defaultConfig","key","isExpired","expire","Date","now","updateTodo","todos","id","map","todo","toggleTodo","done","removeTodo","filter","setNewTodo","createEvent","add","update","toggle","remove","load","createEffect","url","a","fetch","res","json","store","createStore","newTodo","name","on","state","Math","max","doneData","withPersist","config","shortName","persistKey","rehydrate","localStorage","removeItem","snapshot","getItem","JSON","parse","watch","setItem","stringify","TopBar","pt","templateColumns","columnGap","TodoListItems","useStore","$store","isChecked","onChange","mx","value","event","target","TodoList","TodoAdd","placeholder","App","theme","maxWidth","margin","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a5e6cfa.chunk.js","sourcesContent":["import * as React from 'react'\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from '@chakra-ui/react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { createEvent, Store } from 'effector'\n\ntype PersistConfig = {\n  key?: string\n  expire?: number\n}\n\nconst defaultConfig = {\n  key: 'persist'\n}\n\nexport const withPersist = <State>(store: Store<State>, config: PersistConfig = defaultConfig) => {\n  const name = store.shortName\n  const { key, expire } = config\n  const persistKey = `${key}:${name}`\n  const rehydrate = createEvent('@PERSIST/REHYDRATE')\n\n  if (expire && isExpired(expire)) {\n    localStorage.removeItem(persistKey)\n  }\n\n  const snapshot = localStorage.getItem(persistKey)\n\n  if (snapshot) {\n    store.on(rehydrate, () => JSON.parse(snapshot))\n    rehydrate()\n  }\n\n  store.watch((state) => {\n    localStorage.setItem(persistKey, JSON.stringify(state))\n  })\n\n  return store\n}\n\nconst isExpired = (expire: number) => expire < Date.now()\n","import { createEffect, createEvent, createStore } from 'effector-logger/macro'\nimport { withPersist } from './hocs/withPersist'\n\n// Standard interface and functions\nexport interface ITodo {\n  id: number\n  text: string\n  done: boolean\n}\n\nexport const updateTodo = (todos: ITodo[], id: number, text: string): ITodo[] =>\n  todos.map((todo) => ({\n    ...todo,\n    text: todo.id === id ? text : todo.text\n  }))\n\nexport const toggleTodo = (todos: ITodo[], id: number): ITodo[] =>\n  todos.map((todo) => ({\n    ...todo,\n    done: todo.id === id ? !todo.done : todo.done\n  }))\n\nexport const removeTodo = (todos: ITodo[], id: number): ITodo[] => todos.filter((todo) => todo.id !== id)\n\nexport const addTodo = (todos: ITodo[], text: string): ITodo[] => [\n  ...todos,\n  {\n    id: Math.max(0, Math.max(...todos.map(({ id }) => id))) + 1,\n    text,\n    done: false\n  }\n]\n\n// Effector\ninterface IStore {\n  todos: ITodo[]\n  newTodo: string\n}\n\nconst initialState = {\n  todos: [],\n  newTodo: ''\n}\n\n// Events\nexport const setNewTodo = createEvent<string>()\nexport const add = createEvent()\nexport const update = createEvent<{ id: number; text: string }>()\nexport const toggle = createEvent<number>()\nexport const remove = createEvent<number>()\n\n// Effects\nexport const load = createEffect(async (url: string) => {\n  const res = await fetch(url)\n  return res.json()\n})\n\nconst store = createStore<IStore>(initialState, { name: 'todos' })\n\nstore.on(setNewTodo, (state, newTodo) => ({\n  ...state,\n  newTodo\n}))\n\nstore.on(add, (state) => ({\n  ...state,\n  newTodo: '',\n  todos: addTodo(state.todos, state.newTodo)\n}))\n\nstore.on(update, (state, { id, text }) => ({\n  ...state,\n  todos: updateTodo(state.todos, id, text)\n}))\n\nstore.on(toggle, (state, id) => ({\n  ...state,\n  todos: toggleTodo(state.todos, id)\n}))\n\nstore.on(remove, (state, id) => ({\n  ...state,\n  todos: removeTodo(state.todos, id)\n}))\n\nstore.on(load.doneData, (state, todos) => ({\n  ...state,\n  todos\n}))\n\nexport default withPersist(store)\n","import * as React from 'react'\nimport { Button, Grid } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\nimport { load } from '../store'\n/*\nJSON source: https://raw.githubusercontent.com/jherr/todos-four-ways/master/data/todos.json\n*/\n\nconst url = 'https://raw.githubusercontent.com/jherr/todos-four-ways/master/data/todos.json'\n\nfunction TopBar() {\n  return (\n    <Grid pt={2} templateColumns=\"1fr 1fr\" columnGap=\"3\">\n      <ColorModeSwitcher />\n      <Button onClick={() => load(url)}>Load</Button>\n    </Grid>\n  )\n}\n\nexport default TopBar\n","import * as React from 'react'\nimport { Button, Input, Flex, Checkbox, Heading } from '@chakra-ui/react'\nimport { useStore } from 'effector-react'\nimport $store, { update, toggle, remove } from '../store'\n\nfunction TodoListItems() {\n  const { todos } = useStore($store)\n  return (\n    <>\n      {todos.map((todo) => (\n        <Flex pt={2} key={todo.id}>\n          <Checkbox isChecked={todo.done} onChange={() => toggle(todo.id)} />\n          <Input mx={2} value={todo.text} onChange={(event) => update({ id: todo.id, text: event.target.value })} />\n          <Button onClick={() => remove(todo.id)}>Delete</Button>\n        </Flex>\n      ))}\n    </>\n  )\n}\n\nfunction TodoList() {\n  return (\n    <>\n      <Heading>Todo List</Heading>\n      <TodoListItems />\n    </>\n  )\n}\n\nexport default TodoList\n","import * as React from 'react'\nimport { Button, Input, Grid } from '@chakra-ui/react'\nimport { useStore } from 'effector-react'\nimport $store, { setNewTodo, add } from '../store'\n\nfunction TodoAdd() {\n  const store = useStore($store)\n  return (\n    <Grid pt={2} templateColumns=\"5fr 1fr\" columnGap=\"3\">\n      <Input placeholder=\"New todo\" value={store.newTodo} onChange={(event) => setNewTodo(event.target.value)} />\n      <Button onClick={() => add()}>Add Todo</Button>\n    </Grid>\n  )\n}\n\nexport default TodoAdd\n","import * as React from 'react'\nimport { ChakraProvider, Box, theme } from '@chakra-ui/react'\nimport TopBar from './components/TopBar'\nimport TodoList from './components/TodoList'\nimport TodoAdd from './components/TodoAdd'\n\nexport function App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box maxWidth=\"8xl\" margin=\"auto\" p={5}>\n        <TopBar />\n        <TodoList />\n        <TodoAdd />\n      </Box>\n    </ChakraProvider>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react'\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}